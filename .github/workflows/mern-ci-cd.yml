name: Messenger Chat CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend tests and build
  backend-ci:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './server/package-lock.json'
      
      - name: Install backend dependencies
        run: |
          cd server
          npm ci
      
      - name: Run backend linting
        run: |
          cd server
          npm run lint
      
      - name: Run backend tests
        run: |
          cd server
          npm test
        env:
          CI: true
          NODE_ENV: test
          SERVER_PORT: 5001
          CLIENT_URL: http://localhost:5173

  # Frontend tests and build
  frontend-ci:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './client/package-lock.json'
      
      - name: Install frontend dependencies
        run: |
          cd client
          npm ci
      
      - name: Run frontend linting
        run: |
          cd client
          npm run lint
      
      - name: Run frontend tests
        run: |
          cd client
          npm run test
        env:
          CI: true
          VITE_SERVER_URL: http://localhost:5001
      
      - name: Build frontend
        run: |
          cd client
          npm run build
        env:
          VITE_SERVER_URL: ${{ secrets.VITE_SERVER_URL || 'http://localhost:5001' }}
      
      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: client/dist
          retention-days: 7

  # Deploy backend to Render (only on main branch)
  deploy-backend:
    needs: [backend-ci, frontend-ci]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Render
        if: ${{ secrets.RENDER_SERVICE_ID && secrets.RENDER_API_KEY }}
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
      
      - name: Manual deployment notice
        if: ${{ !secrets.RENDER_SERVICE_ID || !secrets.RENDER_API_KEY }}
        run: |
          echo "⚠️ Render deployment secrets not configured."
          echo "Please set RENDER_SERVICE_ID and RENDER_API_KEY in repository secrets."
          echo "Manual deployment may be required."

  # Deploy frontend to Vercel (only on main branch)
  deploy-frontend:
    needs: [backend-ci, frontend-ci]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './client/package-lock.json'
      
      - name: Install dependencies
        run: |
          cd client
          npm ci
      
      - name: Build with production environment
        run: |
          cd client
          npm run build
        env:
          VITE_SERVER_URL: ${{ secrets.VITE_SERVER_URL || 'https://your-backend-url.onrender.com' }}
          VITE_NODE_ENV: production
      
      - name: Deploy to Vercel
        if: ${{ secrets.VERCEL_TOKEN }}
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./client
          vercel-args: '--prod'
      
      - name: Manual deployment notice
        if: ${{ !secrets.VERCEL_TOKEN }}
        run: |
          echo "⚠️ Vercel deployment secrets not configured."
          echo "Please set VERCEL_TOKEN, VERCEL_ORG_ID, and VERCEL_PROJECT_ID in repository secrets."
          echo "You can also deploy manually using: npm run build && vercel --prod"

  # Run health checks after deployment (optional)
  health-check:
    needs: [deploy-backend, deploy-frontend]
    if: ${{ secrets.BACKEND_URL && secrets.FRONTEND_URL }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Wait for deployment
        run: sleep 30
      
      - name: Check backend health
        uses: jtalk/url-health-check-action@v4
        with:
          url: ${{ secrets.BACKEND_URL }}/api/health
          max-attempts: 5
          retry-delay: 10s
      
      - name: Check frontend
        uses: jtalk/url-health-check-action@v4
        with:
          url: ${{ secrets.FRONTEND_URL }}
          max-attempts: 5
          retry-delay: 10s 